#lang pie

;; Because this is the last assignment of the semester, it is given in
;; two parts. One part can be completed using only information from
;; Chapter 15, while one part requires some information from Chapter
;; 16.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Part I

;; 1. Written question.
;;
;; What are the consequences of lists being equal? Please fill out the
;; following table such that your answers are written as types.
;;
;; Assume that x and y have type E.
;;
;;  If these are equal
;;             |           | then this is true
;;  -----------------------+-------------------
;;    nil      | nil       |  Trivial
;;   (:: x xs) | nil       |  Absurd
;;   nil       | (:: y ys) |  Absurd
;;   (:: x xs) | (:: y ys) |  Pair (= E x y) (= (List E) xs ys)

;; 2. Translate your answer to question 1 into a function that
;; computes a type when given two lists.
(claim list=consequences
       (Pi ((E U))
           (-> (List E) (List E)
               U)))

(claim list=consequences/base
  (Pi ((E U))
      (-> (List E)
          U)))

(define list=consequences/base
  (lambda (E lst2)
    (rec-List
      lst2
      Trivial
      (lambda (_ _ _) Absurd))))

(define list=consequences
  (lambda (E lst1)
    (rec-List
      lst1
      (list=consequences/base E)
      (lambda (x1 xs1 _)
        (lambda (lst2)
          (rec-List
            lst2
            Absurd
            (lambda (x2 xs2 _)
              (Pair (= E x1 x2) (= (List E) xs1 xs2)))))))))

;; 3. Prove that the consequences of equality hold for every list.
;; Uncomment this claim after defining list=consequences.
(claim list=consequences-same
       (Pi ((E U))
           (Pi ((es (List E)))
               (list=consequences E es es))))

(define list=consequences-same
  (lambda (E es)
    (ind-List
      es
      (lambda (xs) (list=consequences E xs xs))
      sole
      (lambda (x xs IH) (cons (same x) (same xs))))))

;; 4. Prove the "No confusion" property for lists. In other words,
;; show that if two lists are equal, then the described consequences
;; are true.
(claim use-list=
       (Pi ((E U)
            (xs (List E))
            (ys (List E)))
           (-> (= (List E) xs ys)
               (list=consequences E xs ys))))

(define use-list=
  (lambda (E xs ys xs=ys)
    (replace
      xs=ys
      (lambda (ks) (list=consequences E xs ks))
      (list=consequences-same E xs))))

;; 5. Translate the following statement to a type, write it as a
;; claim, and prove it: "No list with :: at the top is ever equal to
;; nil".
(claim ::-not-euqal-to-nil
  (Pi ((E U)
       (x E)
       (xs (List E)))
      (-> (= (List E) nil (:: x xs))
          Absurd)))

(define ::-not-euqal-to-nil
  (lambda (E x xs nil=x::xs)
    (use-list= E nil (:: x xs) nil=x::xs)))

;; 6. Translate the following statement to a type, write it as a
;; claim, and prove it.  "Any two equal lists with :: at the top have
;; an equal head and an equal tail."

(claim equal-list-equal-head-tail
  (Pi ((E U)
       (x E)
       (y E)
       (xs (List E))
       (ys (List E)))
      (-> (= (List E) (:: x xs) (:: y ys))
          (Pair (= E x y) (= (List E) xs ys)))))

(define equal-list-equal-head-tail
  (lambda (E x y xs ys x::xs=y::ys)
    (use-list= E (:: x xs) (:: y ys) x::xs=y::ys)))

;; 7. Demonstrate that ind-Vec can do anything that tail can do by
;; defining the function "back" using ind-Vec. You'll need the
;; technique from chapter 15. Uncomment the test before handing in the
;; assignment.
;;
;; It is not allowed to use head or tail in this solution!

(claim nat=consequences
  (-> Nat Nat
      U))

(define nat=consequences
  (lambda (x y)
    (which-Nat
      x
      (which-Nat y Trivial (lambda (_) Absurd))
      (lambda (x-1)
        (which-Nat
          y
          Absurd
          (lambda (y-1) (= Nat x-1 y-1)))))))

(claim nat=consequences-same
  (Pi ((n Nat))
      (nat=consequences n n)))

(define nat=consequences-same
  (lambda (n)
    (ind-Nat
      n
      (lambda (k) (nat=consequences k k))
      sole
      (lambda (k IH) (same k)))))

(claim use-nat=
  (Pi ((n Nat)
       (m Nat))
       (-> (= Nat n m)
           (nat=consequences n m))))

(define use-nat=
  (lambda (n m n=m)
    (replace
      n=m
      (lambda (k) (nat=consequences n k))
      (nat=consequences-same n))))

(claim sub1
  (-> Nat
    Nat))
(define sub1
  (λ (n)
    (which-Nat n
        zero
        (λ (n-1)
          n-1))))

(claim back
  (Pi ((E U)
       (n Nat))
    (-> (Vec E (add1 n))
      (Vec E n))))


(define back
  (lambda (E n vn+1)
    ((ind-Vec
      (add1 n) vn+1
      (lambda (k vk)
        (-> (= Nat k (add1 n)) (Vec E (sub1 k))))
      (lambda (0=n+1)
        (ind-Absurd
          (use-nat= 0 (add1 n) 0=n+1)
          (Vec E 0)))
      (lambda (k e vk acc)
        (lambda (k=n+1) vk))) (same (add1 n)))))

(check-same (Vec Atom 2)
  (back Atom 2 (vec:: 'cantaloupe (vec:: 'strawberries (vec:: 'huckleberries vecnil))))
  (vec:: 'strawberries (vec:: 'huckleberries vecnil)))

;; the example below does not work, therefore we cannot call `back` on an empty vector
#;
(back Atom 0 vecnil)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Part II

;; Here are some useful helpers.
(claim Not (-> U U))
(define Not (lambda (X) (-> X Absurd)))

(claim Dec (-> U U))
(define Dec (lambda (X) (Either X (Not X))))

;; 7. Prove that it is decidable whether a list is equal to nil.
(claim nil?
       (Pi ((E U)
            (es (List E)))
           (Dec (= (List E) nil es))))

(define nil?
  (lambda (E es)
    (ind-List
      es
      (lambda (xs) (Dec (= (List E) nil xs)))
      (left (same nil))
      (lambda (x xs IH)
        (right
          (lambda (assumption)
            (use-list= E nil (:: x xs) assumption)))))))

;; 8. Prove that the equality of lists is decidable if the equality of
;; their members is decidable.
;;
;; This question is worth 4 points, to be determined depending on your
;; progress:
;;
;; 1 point for systematically describing in English how the solution
;; could be written, with reference to the corresponding proof that
;; equality on Nat is decidable.
;;
;; 2 points for a Pie solution that has both base cases working, and a
;; systematic English description of how to write the step, based on
;; the Nat equivalent.
;;
;; 4 points for a fully-working solution in Pie.
;;
;; It is worth your while to define helper functions for the various
;; bases and steps. Giving them memorable names also helps.
;;
;;
;; Informal Proof:
;; Assuming we are determining the equality of two lists of Nats.
;; We can decide the equality inductively:
;;  a) If both lists are empty, then they are trivially equal.
;;  b) If one is empty and the other is not, then they are trivially not equal,
;;  c) If both are non-empty, then we divide the decision problem into
;;     first deciding the heads of the lists are equal and the tails
;;     of the lists are equal.
;;     - Deciding whether the heads are equal is essentially decide whether
;;       two Nats are equal (since we assumed Nat lists).
;;       Since we assume the equality on Nat is decideable, then deciding
;;       whether heads are equal is decideable as well.
;;     - The equality of two tails being decideable is our inductive hypothesis,
;;       therefore it is also true.
;;     In conclusion, in the case both lists are non-empty, determining
;;     their equality is decideable.
;;
(claim list=?
       (Pi ((E U)
            (=? (Pi ((v E) (w E)) (Dec (= E v w))))
            (xs (List E))
            (ys (List E)))
           (Dec (= (List E) xs ys))))

(claim lemma/dec-nil=ys
  (Pi ((E U)
       (lys (List E)))
      (Dec (= (List E) nil lys))))

(define lemma/dec-nil=ys
  (lambda (E lys) (nil? E lys)))

(claim lemma/dec-x::xs=nil
  (Pi ((E U)
       (x E)
       (xs (List E)))
      (Dec (= (List E) (:: x xs) nil))))

(define lemma/dec-x::xs=nil
  (lambda (E x xs)
    (right
      (lambda (x::xs=nil)
        (use-list= E (:: x xs) nil x::xs=nil)))))

(claim ::f
       (Pi ((X U)
            (x X))
           (-> (List X)
               (List X))))
(define ::f
  (lambda (X x) (lambda (lst) (:: x lst))))

(claim lemma/xs=ys->dec-x::xs=y::ys
  (Pi ((E U)
       (x E)
       (y E)
       (xs (List E))
       (ys (List E))
       (=? (Pi ((v E) (w E)) (Dec (= E v w))))
       (xs=ys (= (List E) xs ys)))
      (Dec (= (List E) (:: x xs) (:: y ys)))))

(define lemma/xs=ys->dec-x::xs=y::ys
  (lambda (E x y xs ys =? xs=ys)
    (ind-Either
      (=? x y)
      (lambda (_) (Dec (= (List E) (:: x xs) (:: y ys))))
      (lambda (x=y)
        (left
          (replace
            x=y
            (lambda (k) (= (List E) (:: x xs) (:: k ys)))
            (cong xs=ys (::f E x)))))
      (lambda (x!=y)
        (right
          (lambda (x::xs=y::ys)
            (x!=y
              (car (use-list= E (:: x xs) (:: y ys) x::xs=y::ys)))))))))

(claim lemma/xs!=ys->x::xs!=y::ys
  (Pi ((E U)
       (x E)
       (y E)
       (xs (List E))
       (ys (List E)))
      (-> (Not (= (List E) xs ys))
          (Not (= (List E) (:: x xs) (:: y ys))))))

(define lemma/xs!=ys->x::xs!=y::ys
  (lambda (E x y xs ys xs!=ys)
    (lambda (x::xs=y::ys)
      (xs!=ys
        (cdr (use-list= E (:: x xs) (:: y ys) x::xs=y::ys))))))

(claim lemma/xs!=ys->dec-x::xs=y::ys
  (Pi ((E U)
       (x E)
       (y E)
       (xs (List E))
       (ys (List E))
       (xs!=ys (Not (= (List E) xs ys))))
      (Dec (= (List E) (:: x xs) (:: y ys)))))

(define lemma/xs!=ys->dec-x::xs=y::ys
  (lambda (E x y xs ys xs!=ys)
    (right
      (lemma/xs!=ys->x::xs!=y::ys E x y xs ys xs!=ys))))

(define list=?
  (lambda (E =?dec lxs)
    (ind-List
      lxs
      (lambda (ks)
        (Pi ((lys (List E)))
            (Dec (= (List E) ks lys))))
      (lemma/dec-nil=ys E)
      (lambda (x xs IHx)
        (lambda (lys)
          (ind-List
            lys
            (lambda (ks) (Dec (= (List E) (:: x xs) ks)))
            (lemma/dec-x::xs=nil E x xs)
            (lambda (y ys IHy)
              (ind-Either
                (IHx ys)
                (lambda (_) (Dec (= (List E) (:: x xs) (:: y ys))))
                (lemma/xs=ys->dec-x::xs=y::ys E x y xs ys =?dec)
                (lemma/xs!=ys->dec-x::xs=y::ys E x y xs ys)))))))))
