#lang pie

;; In part I, for each claim, write a definition that Pie
;; accepts.
;;
;; In part II, some tasks do not have claims. For these tasks, please
;; write a suitable type as a claim, and then write the
;; definition. Translate each example in the assignment into a test
;; using check-same, and write at least one additional test using
;; check-same for each definition.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; First, some helpers that will be useful later.
(claim +
  (→ Nat Nat
    Nat))
(define +
  (λ (j k)
    (iter-Nat j
      k
      (λ (n)
        (add1 n)))))

;; identity function
(claim id
  (Π ((X U))
   (-> X X)))

(define id
  (lambda (_ n) n))

;; const function
(claim const
  (Π ((X U))
    (-> X X
    X)))

(define const
  (lambda (_ x _) x))

(claim sub1
  (-> Nat
    Nat))

(define sub1
  (lambda (n)
    (which-Nat n 0 (id Nat))))

;; monus implementation from assignment 2
(claim monus
  (-> Nat Nat
    Nat))

(define monus
  (lambda (n m)
    (iter-Nat m n sub1)))

(claim sub1/either
  (-> Nat
      (Either Atom Nat)))

(define sub1/either
  (lambda (n)
    (which-Nat
      n
      (the (Either Atom Nat) (left 'neg))
      (lambda (n-1) (right n-1)))))

(claim minus
  (-> Nat Nat
      (Either Atom Nat)))

(define minus
  (lambda (n m)
    (iter-Nat
      m
      (the (Either Atom Nat) (right n))
      (lambda (e)
        (ind-Either
          e
          (lambda (_) (Either Atom Nat))
          (lambda (l) (left l))
          (lambda (r) (sub1/either r)))))))

;; max implementation from assignment 2
(claim max
  (-> Nat Nat Nat))


(define max
  (lambda (n m)
    (which-Nat
      (monus n m)
      m
      (const Nat n))))

;; min implementation from assignment 2
(claim min
  (-> Nat Nat
    Nat))

(define min
  (lambda (n m)
    (which-Nat
      (monus n m)
      n
      (const Nat m))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Part I
;; 0.
(claim first-of-three
  (Π ((A U)
      (B U)
      (C U))
    (→ (Pair A (Pair B C))
      A)))

(define first-of-three
  (lambda (_ _ _ p)
    (car p)))

(check-same
  Atom
  (first-of-three Atom Atom Atom (cons 'foo (cons'bar 'baz)))
  'foo)

;; 1.
(claim second-of-three
  (Π ((A U)
      (B U)
      (C U))
    (→ (Pair A (Pair B C))
      B)))

(define second-of-three
  (lambda (_ _ _ p)
    (car (cdr p))))

(check-same
  Atom
  (second-of-three Atom Atom Atom (cons 'foo (cons'bar 'baz)))
  'bar)

;; 2.
(claim third-of-three
  (Π ((A U)
      (B U)
      (C U))
    (→ (Pair A (Pair B C))
      C)))

(define third-of-three
  (lambda (_ _ _ p)
    (cdr (cdr p))))

(check-same
  Atom
  (third-of-three Atom Atom Atom (cons 'foo (cons'bar 'baz)))
  'baz)

;; 3.
(claim left-rebalance
  (Π ((A U)
      (B U)
      (C U)
      (D U))
    (→ (Pair A (Pair B (Pair C D)))
      (Pair (Pair A B) (Pair C D)))))

(define left-rebalance
  (lambda (_ _ _ _ p)
    (cons
      (cons (car p) (car (cdr p)))
      (cdr (cdr p)))))

(check-same
  (Pair (Pair Atom Atom) (Pair Atom Atom))
  (left-rebalance Atom Atom Atom Atom
                  (cons 'one (cons 'two (cons 'three 'four))))
  (cons (cons 'one 'two) (cons 'three 'four)))

;; 4.
(claim change-pair
  (Π ((A U)
      (B U)
      (C U)
      (D U))
   (→ (→ A C)
      (→ B D)
      (Pair A B)
     (Pair C D))))

(define change-pair
  (lambda (_ _ _ _ f g p)
    (cons
      (f (car p))
      (g (cdr p)))))

(check-same
  (Pair Nat Nat)
  (change-pair
    Atom Atom Nat Nat
    (lambda (_) 1)
    (lambda (_) 2)
    (cons 'foo 'bar))
  (cons 1 2))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Part II


;;; 5. Write a function that finds the length of any list
;;; Examples:
;;;  (length Atom nil) ==> 0
;;;  (length Atom (:: 'gule-ærter (:: 'tarteletter nil))) ==> 2
(claim length
  (Π ((E U))
    (→ (List E)
      Nat)))

(define length
  (lambda (_ l)
    (rec-List
      l
      zero
      (lambda (e _ len)
        (add1 len)))))

(check-same
  Nat
  (length Atom nil)
  0)

(check-same
  Nat
  (length Atom (:: 'gule-ærter (:: 'tarteletter nil)))
  2)

(check-same
  Nat
  (length Nat (:: 1 (:: 2 (:: 3 nil))))
  3)

;;; 6. Write a function that finds the sum of the entries in a list of Nats
;;; Examples:
;;;  (sum-List nil) ==> 0
;;;  (sum-List (:: 3 (:: 39 nil))) ==> 42
(claim sum-List
  (-> (List Nat)
    Nat))

(define sum-List
  (lambda (l)
    (rec-List
      l
      0
      (lambda (e _ s)
        (+ e s)))))

(check-same
  Nat
  (sum-List nil)
  0)

(check-same
  Nat
  (sum-List (:: 3 (:: 39 nil)))
  42)

(check-same
  Nat
  (sum-List (:: 1 (:: 2 (:: 3 (:: 4 nil)))))
  10)


;;; 7. Write a function to find the largest entry in a list of Nats.
;;;    Please feel free to copy your implementation of max from a previous
;;;    assignment.
;;; Examples:
;;;  (max-List (:: 1 (:: 3 (:: 2 nil)))) ==> 3
;;;  (max-List nil) ==> 0
;;;  (max-List (:: 15 (:: 2 nil))) ==> 15

(claim max-List
  (-> (List Nat)
      Nat))

(define max-List
  (lambda (l)
    (rec-List
      l
      0
      (lambda (e es m)
        (max e m)))))

(check-same
  Nat
  (max-List (:: 1 (:: 3 (:: 2 nil))))
  3)

(check-same
  Nat
  (max-List nil)
  0)

(check-same
  Nat
  (max-List (:: 15 (:: 2 nil)))
  15)

(check-same
  Nat
  (max-List (:: 3 (:: 9 (:: 9 (:: 1 (:: 10 (:: 4 (:: 5 nil))))))))
  10)


;;; 8. Written question:
;;;   Is min-List (that finds the smallest entry in a (List Nat)) more
;;;   difficult to write than max-List? If so, why? If not, please
;;;   define it.

;;; YOUR ANSWER TO THE WRITTEN QUESTION GOES HERE:
;;; Yes it is more difficult to define min-List. This is because (Nat, max) forms a monoid, with identity element 0;
;;; therefore, to implement max-List, we can start with base case 0, and iterating over the list using the max operater.
;;; On the other hand, (Nat, min) is a semigroup with an absorbing element (i.e., the natural number 0), so it's hard to give a base case to start with.
;;; Ideally, we want an INFINITY element in our Nat, then min-List would be easy to write.

;; auxiliary function for min-List
;; which takes a list of natural numbers and returns (left 'empty) when the list is empty (i.e., nil)
;; or (right m) when the list is non-empty (m is the maximal element).
(claim min-List/aux
  (-> (List Nat)
      (Either Atom Nat)))

(define min-List/aux
  (lambda (l)
    (rec-List
      l
      (the (Either Atom Nat)(left 'empty))
      (lambda (e es x)
        (ind-Either
          x
          (lambda (_) (Either Atom Nat))
          (lambda (_) (right e))
          (lambda (r) (right (min e r))))))))

;; min-List takes a list of natural numbers and returns the minimal element.
;; If the list is empty, it returns 0.
(claim min-List
  (-> (List Nat)
      Nat))

(define min-List
  (lambda (l)
    (ind-Either
      (min-List/aux l)
      (lambda (_) Nat)
      (lambda (_) 0)
      (lambda (r) r))))

(check-same
  Nat
  (min-List (:: 1 (:: 3 (:: 2 nil))))
  1)

(check-same
  Nat
  (min-List nil)
  0)

(check-same
  Nat
  (min-List (:: 15 (:: 2 nil)))
  2)

(check-same
  Nat
  (min-List (:: 3 (:: 9 (:: 9 (:: 1 (:: 10 (:: 4 (:: 5 nil))))))))
  1)

;;; 9. map applies a function to each element in a list, constructing a
;;; list of the results. Define it.
;;; Examples:
;;;  (map Nat Nat (+ 2) (:: 1 (:: 2 (:: 3 nil)))) ==> (:: 3 (:: 4 (:: 5 nil)))
;;;  (map (List Atom) Nat (length Atom) (:: (:: 'kiksekage (:: 'æbleskiver nil)) (:: (:: 'rødgrød-med-fløde nil) nil)))
;;;    ==> (:: 2 (:: 1 nil))
(claim map
  (Π ((A U)
      (B U))
    (→ (→ A B) (List A)
      (List B))))

(define map
  (lambda (_ B f l)
    (rec-List
      l
      (the (List B) nil)
      (lambda (e es tl)
        (:: (f e) tl)))))

(check-same
  (List Nat)
  (map Nat Nat (+ 2) (:: 1 (:: 2 (:: 3 nil))))
  (:: 3 (:: 4 (:: 5 nil))))

(check-same
  (List Nat)
  (map (List Atom) Nat (length Atom) (:: (:: 'kiksekage (:: 'æbleskiver nil)) (:: (:: 'rødgrød-med-fløde nil) nil)))
  (:: 2 (:: 1 nil)))

(check-same
  (List Nat)
  (map (List Nat) Nat min-List (:: (:: 3 (:: 9 (:: 9 (:: 1 (:: 10 (:: 4 (:: 5 nil))))))) (:: (:: 15 (:: 2 nil)) nil)))
  (:: 1 (:: 2 nil)))


;;; 10. Count the number of occurrences of 0 in a (List Nat)
;;; Examples:
;;;  (count-zeroes (:: 0 (:: 3 (:: 0 nil)))) ==> 2
;;;  (count-zeroes nil) ==> 0
(claim count-zeroes
  (-> (List Nat)
      Nat))

(define count-zeroes
  (lambda (l)
    (rec-List
      l
      0
      (lambda (e es c)
        (which-Nat e (add1 c) (lambda (_) c))))))

(check-same
  Nat
  (count-zeroes nil)
  0)

(check-same
  Nat
  (count-zeroes (:: 0 (:: 3 (:: 0 nil))))
  2)

(check-same
  Nat
  (count-zeroes (:: 42 (:: 0 (:: 0 (:: 1 (:: 0 nil))))))
  3)


;;; 11. Form a list from n iterations of a function to a starting value
;;; Examples:
;;;  (iterations Nat 5 (+ 2) 0)) ==> (:: 0 (:: 2 (:: 4 (:: 6 (:: 8 nil)))))
;;;  (iterations (List Atom) 3 (lambda (x) (:: 'add-one x)) (:: 'zero nil)) ==>
;;;      (:: (:: 'zero nil)
;;;        (:: (:: 'add-one
;;;              (:: 'zero nil))
;;;          (:: (:: 'add-one
;;;                (:: 'add-one
;;;                  (:: 'zero nil)))
;;;            nil)))

;; apply function f for n times on argument a)
(claim apply/n
  (Π ((E U))
     (->
       (-> E E) Nat E
       E)))

(define apply/n
  (lambda (_ f n e)
    (iter-Nat
      n
      e
      (lambda (x) (f x)))))

(claim iterations
  (Π ((E U))
    (→ Nat (→ E E) E
      (List E))))

(define iterations
  (lambda (E n f a)
    (rec-Nat
      n
      (the (List E) nil)
      (lambda (n-1 l)
        (:: (apply/n E f (monus n (add1 n-1)) a) l)))))


(check-same
  (List Nat)
  (iterations Nat 5 (+ 2) 0)
  (:: 0 (:: 2 (:: 4 (:: 6 (:: 8 nil))))))

(check-same
  (List (List Atom))
  (iterations (List Atom) 3 (lambda (x) (:: 'add-one x)) (:: 'zero nil))
    (:: (:: 'zero nil)
        (:: (:: 'add-one
                (:: 'zero nil))
            (:: (:: 'add-one
                    (:: 'add-one
                        (:: 'zero nil)))
                nil))))

(check-same
  (List Nat)
  (iterations Nat 0 (+ 2) 0)
  nil)



;;;; Optional challenge problems

;;; The remaining tasks contribute in no way to your grade, but might
;;; be fun to work on.

;;; Return the nth element of a list, or if n is too big, return the
;;; default.
;;;
;;; Examples:
;;;   (nth Atom (:: 'hi (:: 'there nil)) 'nope 0) ==> 'hi
;;;   (nth Atom (:: 'hi (:: 'there nil)) 'nope 1) ==> 'there
;;;   (nth Atom (:: 'hi (:: 'there nil)) 'nope 2) ==> 'nope
;;;   (nth Atom (:: 'hi (:: 'there nil)) 'nope 3) ==> 'nope
;;;   (nth Atom (:: 'hi (:: 'there nil)) 'nope 30) ==> 'nope
(claim nth
  (Π ((E U))
    (→ (List E) E Nat
      E)))

(claim nth/aux
  (Π ((E U))
    (→ (List E) E Nat
      (Pair E (Either Atom Nat)))))

(define nth/aux
  (lambda (E l default n)
    (rec-List
      l
      (ind-Either
        (minus (length E l) n)
        (lambda (_) (Pair E (Either Atom Nat)))
        (lambda (_) (cons default (left 'done)))
        (lambda (x)
          (which-Nat
            x
            (the (Pair E (Either Atom Nat)) (cons default (left 'done)))
            (lambda (x-1) (cons default (right x-1))))))
      (lambda (e es p)
        (ind-Either
          (cdr p)
          (lambda (_) (Pair E (Either Atom Nat)))
          (lambda (_) p)
          (lambda (x)
            (which-Nat
              x
              (the (Pair E (Either Atom Nat)) (cons e (left 'done)))
              (lambda (x-1) (cons e (right x-1))))))))))

(define nth
  (lambda (E l default n)
    (car (nth/aux E l default n))))


(check-same
  Atom
  (nth Atom (:: 'hi (:: 'there nil)) 'nope 0)
  'hi)

(check-same
  Atom
  (nth Atom (:: 'hi (:: 'there nil)) 'nope 1)
  'there)

(check-same
  Atom
  (nth Atom (:: 'hi (:: 'there (:: 'hello nil))) 'nope 1)
  'there)

(check-same
  Atom
  (nth Atom (:: 'hi (:: 'there nil)) 'nope 2)
  'nope)

(check-same
  Atom
  (nth Atom (:: 'hi (:: 'there nil)) 'nope 3)
  'nope)

(check-same
  Atom
  (nth Atom (:: 'hi (:: 'there nil)) 'nope 30)
  'nope)


;;; Write a function to sort a list of Nats in ascending order
;;; Examples:
;;;  (sort (:: 3 (:: 99 (:: 2 nil)))) ==> (:: 2 (:: 3 (:: 99 nil)))
;;;  (sort (:: 2 (:: 34 (:: 2 (:: 34 nil))))) ==> (:: 2 (:: 2 (:: 34 (:: 34 nil))))
(claim sort
  (→ (List Nat)
    (List Nat)))
