#lang pie

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Here are some definitions that will be used later

(claim +-step
  (-> Nat
    Nat))
(define +-step
  (λ (n)
    (add1 n)))

(claim +
  (-> Nat Nat
    Nat))
(define +
  (λ (n m)
    (iter-Nat n
        m
        +-step)))

(claim double
  (-> Nat
    Nat))
(define double
  (λ (n)
    (iter-Nat n
        0
        (+ 2))))

;; identity function
(claim id
  (Π ((X U))
   (-> X X)))

(define id
  (lambda (_ n) n))

;; const function
(claim const
  (Π ((X U))
    (-> X X
    X)))

(define const
  (lambda (_ x _) x))

(claim sub1
  (-> Nat
    Nat))

(define sub1
  (lambda (n)
    (which-Nat n 0 (id Nat))))

;; monus implementation from assignment 2
(claim monus
  (-> Nat Nat
    Nat))

(define monus
  (lambda (n m)
    (iter-Nat m n sub1)))

;; min implementation from assignment 2
(claim min
  (-> Nat Nat
    Nat))

(define min
  (lambda (n m)
    (which-Nat
      (monus n m)
      n
      (const Nat m))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The assignment
;;
;; Please implement a definition for each claim, and uncomment all
;; tests before submitting.

;; 1. replicate makes how-many copies of an E
(claim replicate
  (Π ((E U)
      (how-many Nat))
    (-> E
      (Vec E how-many))))

(define replicate
  (lambda (E n e)
    (ind-Nat
      n
      (lambda (k) (Vec E k))
      vecnil
      (lambda (n-1 vec)
          (vec:: e vec)))))


(check-same (Vec Atom 4)
  (replicate Atom 4 'champignon)
  (vec:: 'champignon
    (vec:: 'champignon
      (vec:: 'champignon
        (vec:: 'champignon vecnil)))))

(check-same (Vec (List Nat) 2)
  (replicate (List Nat) 2 (:: 1 (:: 2 nil)))
  (vec:: (:: 1
           (:: 2 nil))
    (vec:: (:: 1
             (:: 2 nil))
      vecnil)))

;; 2. Select a name and write a claim and a definition for a function
;;    that finds the smallest entry in a non-empty Vec of Nats.
(claim min/vec
  (Π ((n Nat))
     (-> (Vec Nat n)
         Nat)))

(define min/vec
  (lambda (n v)
    (ind-Vec
      n v
      (lambda (_ _) Nat)
      0
      (lambda (k e es s)
        (which-Nat
          k
          e
          (lambda (_) (min s e)))))))

(check-same Nat
  (min/vec 4
    (vec:: 5 (vec:: 2 (vec:: 4 (vec:: 3 vecnil)))))
  2)

(check-same Nat
  (min/vec 4
    (vec:: 5 (vec:: 2 (vec:: 1 (vec:: 3 vecnil)))))
  1)

(check-same Nat
  (min/vec 4
    (vec:: 5 (vec:: 2 (vec:: 4 (vec:: 0 vecnil)))))
  0)

;; 3. map-Vec is like map from last time, but it works on Vec instead of List.
(claim map-Vec
  (Π ((A U)
      (B U)
      (n Nat))
    (-> (-> A
          B)
        (Vec A n)
      (Vec B n))))

(define map-Vec
  (lambda (A B n f v)
    (ind-Vec
      n v
      (lambda (k _) (Vec B k))
      (the (Vec B zero) vecnil)
      (lambda (k e es vp)
        (vec:: (f e) vp)))))

;; 4. zip-with-Vec combines two Vecs, one entry at a time, using some function.
(claim zip-with-Vec
  (Π ((A U)
      (B U)
      (C U)
      (n Nat))
    (-> (-> A B
          C)
        (Vec A n)
        (Vec B n)
      (Vec C n))))

(define zip-with-Vec
  (lambda (A B C n f va)
    (ind-Vec
      n va
      (lambda (k _) (-> (Vec B k) (Vec C k)))
      (lambda (vb) (the (Vec C zero) vecnil))
      (lambda (ka ea eas h)
        (lambda (vb) ;; vb : Vec B ka
          (vec::
            (f ea (head vb))
            (h (tail vb))))))))

(check-same (Vec (Pair Nat Atom) 2)
  (vec:: (cons 2 'chicken-of-the-woods)
    (vec:: (cons 22 'hen-of-woods) vecnil))
  (zip-with-Vec Nat Atom (Pair Nat Atom) 2
    (lambda (n s)
      (cons n s))
    (vec:: 2
      (vec:: 22 vecnil))
    (vec:: 'chicken-of-the-woods
      (vec:: 'hen-of-woods vecnil))))

;; 5. snoc-Vec adds to the back of a Vec
(claim snoc-Vec
  (Π ((E U)
      (n Nat))
    (-> (Vec E n) E
      (Vec E (add1 n)))))

(define snoc-Vec
  (lambda (E n v e)
    (ind-Vec
      n v
      (lambda (k _) (Vec E (+ 1 k)))
      (vec:: e vecnil)
      (lambda (k e es vp)
        (vec:: e vp)))))

(check-same (Vec Atom 2)
  (vec:: 'pea
    (vec:: 'carrot vecnil))
  (snoc-Vec Atom 1
    (vec:: 'pea vecnil)
    'carrot))

;; 6. vec->list computes a List with the same entries in the same order as a Vec
(claim vec->list
  (Π ((E U)
      (n Nat))
    (-> (Vec E n)
      (List E))))

(define vec->list
  (lambda (E n v)
    (ind-Vec
      n v
      (lambda (_ _) (List E))
      nil
      (lambda (k e es l)
        (:: e l)))))

(check-same (List Atom)
  (vec->list Atom 2
    (vec:: 'flour
      (vec:: 'shortening vecnil)))
  (:: 'flour
    (:: 'shortening nil)))

(check-same (List Nat)
  (vec->list Nat 3 (vec:: 7 (vec:: 9 (vec:: 13 vecnil))))
  (:: 7 (:: 9 (:: 13 nil))))

;; 7. reverse-Vec constructs a new Vec of the same length, with the entries
;;    in the opposite order.
(claim reverse-Vec
  (Π ((E U)
      (n Nat))
    (-> (Vec E n)
      (Vec E n))))

;; using snoc-Vec to insert the element to the back of the vec at each iteration
(define reverse-Vec
  (lambda (E n v)
    (ind-Vec
      n v
      (lambda (k _) (Vec E k))
      vecnil
      (lambda (k e es vp)
        (snoc-Vec E k vp e)))))

(check-same (Vec Atom 3)
  (vec:: 'porcini
    (vec:: 'crimini
      (vec:: 'oyster vecnil)))
  (reverse-Vec Atom 3
    (vec:: 'oyster
      (vec:: 'crimini
        (vec:: 'porcini vecnil)))))

;; 8. doubles provides the entries in its argument, each twice
(claim doubles
  (Π ((E U)
      (n Nat))
    (-> (Vec E n)
      (Vec E (double n)))))

(define doubles
  (lambda (E n v)
    (ind-Vec
      n v
      (lambda (k _) (Vec E (double k)))
      vecnil
      (lambda (k e es vp)
        (vec:: e
          (vec:: e
            vp))))))

(check-same (Vec Atom 4)
  (doubles Atom 2
    (vec:: 'chantrelle
      (vec:: 'shiitake vecnil)))
  (vec:: 'chantrelle
    (vec:: 'chantrelle
      (vec:: 'shiitake
        (vec:: 'shiitake vecnil)))))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Optional challenge problems

;; These problems do not contribute to your grade in any way, but are
;; present in case you're having fun and want to continue.

(claim append-Vec
  (Π ((E U)
      (n Nat)
      (m Nat))
    (-> (Vec E n) (Vec E m)
      (Vec E (+ n m)))))
#;
(check-same (Vec Atom 5)
  (vec:: 'portobello
    (vec:: 'bay-bolete
      (vec:: 'funnel-chantrelle
        (vec:: 'sheathed-woodtuft
          (vec:: 'puffball vecnil)))))
  (append-Vec Atom 3 2
    (vec:: 'portobello
      (vec:: 'bay-bolete
        (vec:: 'funnel-chantrelle vecnil)))
    (vec:: 'sheathed-woodtuft
      (vec:: 'puffball vecnil))))


(claim transpose
  (Π ((E U)
      (n Nat)
      (m Nat))
   (-> (Vec (Vec E m) n)
     (Vec (Vec E n) m))))

#;
(check-same (Vec (Vec Atom 2) 3)
  (transpose Atom 2 3
    (vec:: (vec:: 'a (vec:: 'b (vec:: 'c vecnil)))
      (vec:: (vec:: 'd (vec:: 'e (vec:: 'f vecnil)))
        vecnil)))
  (vec:: (vec:: 'a (vec:: 'd vecnil))
    (vec:: (vec:: 'b (vec:: 'e vecnil))
      (vec:: (vec:: 'c (vec:: 'f vecnil))
        vecnil))))
