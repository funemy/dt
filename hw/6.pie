#lang pie

;; Assignment 6
;;
;; This assignment has thirteen mandatory problems and two
;; optional challenge problems.
;;
;; Because you're writing proofs, tests are not needed. If they help
;; your understanding, though, please feel free to use tests.

;; Here are some definitions to get you started.
;; They're just like in the book.
(claim step-+
  (-> Nat
    Nat))

(define step-+
  (λ (n)
    (add1 n)))

(claim +
  (-> Nat Nat
    Nat))

(define +
  (λ (n j)
    (iter-Nat n
         j
         step-+)))

(claim step-*
  (-> Nat Nat Nat
    Nat))

(define step-*
  (λ (m n-1ig *-of-n-1)
    (+ m *-of-n-1)))

(claim *
  (-> Nat Nat
    Nat))

(define *
  (λ (n j)
    (rec-Nat n
        0
        (step-* j))))

;;; Add your proofs from Assignment 5 here.
(claim +-left-zero
  (Π ((n Nat))
    (= Nat (+ 0 n) n)))

(define +-left-zero
  (lambda (n) (same n)))

(claim +-right-zero
  (Π ((n Nat))
    (= Nat (+ n 0) n)))

(define +-right-zero
  (lambda (n)
    (ind-Nat
      n
      (lambda (k) (= Nat (+ k 0) k))
      (same 0)
      (lambda (k IH) (cong IH (+ 1))))))

(claim +-left-add1
  (Π ((n Nat)
      (m Nat))
    (= Nat (+ (add1 n) m) (add1 (+ n m)))))

(define +-left-add1
  (lambda (n m)
    (same (add1 (+ n m)))))

(claim +-right-add1
  (Π ((n Nat)
      (m Nat))
    (= Nat (add1 (+ n m)) (+ n (add1 m)))))

(define +-right-add1
  (lambda (n m)
    (ind-Nat
      n
      (lambda (k) (= Nat (add1 (+ k m)) (+ k (add1 m))))
      (same (add1 m))
      (lambda (k IH) (cong IH (+ 1))))))

(claim +-associative
  (Π ((l Nat)
      (m Nat)
      (r Nat))
    (= Nat
     (+ l (+ m r))
     (+ (+ l m) r))))

(define +-associative
  (lambda (x y z)
    (ind-Nat
      x
      (lambda (k) (= Nat (+ k (+ y z)) (+ (+ k y) z)))
      (same (+ y z))
      (lambda (k IH) (cong IH (+ 1))))))

;;;;;;;;;;
;; Mandatory problems

;; 1. Prove that addition is commutative. An operation is "commutative" if
;;    flipping the order of arguments gives back the same answer. It is very
;;    helpful to write a separate step with a type signature if you get stuck.
(claim +-commutative
  (Π ((n Nat)
      (m Nat))
    (= Nat (+ n m) (+ m n))))

(define +-commutative
  (lambda (n m)
    (ind-Nat
      n
      (lambda (k) (= Nat (+ k m) (+ m k)))
      (symm (+-right-zero m))
      (lambda (k IH)
        (trans (cong IH (+ 1)) (+-right-add1 m k))))))

;; 2 and 3. Show that anything times 0 is 0, both ways around
(claim *-left-zero
  (Π ((n Nat))
    (= Nat (* zero n) zero)))

(define *-left-zero
  (lambda (n)
    (same 0)))

(claim *-right-zero
  (Π ((n Nat))
    (= Nat (* n zero) zero)))

(define *-right-zero
  (lambda (n)
    (ind-Nat
      n
      (lambda (k) (= Nat (* k 0) 0))
      (same 0)
      (lambda (k IH) IH))))

;; 4 and 5. Show that 1 is a left and right identity of *
(claim *-left-1
  (Π ((n Nat))
    (= Nat (* 1 n) n)))

(define *-left-1
  (lambda (n)
    (+-right-zero n)))

(claim *-right-1
  (Π ((n Nat))
    (= Nat (* n 1) n)))

(define *-right-1
  (lambda (n)
    (ind-Nat
      n
      (lambda (k) (= Nat (* k 1) k))
      (same 0)
      (lambda (k IH) (cong IH (+ 1))))))


;; 6. Show that ((1 + a) * b) = b + a * b
(claim *-left-add1
  (Π ((a Nat)
      (b Nat))
    (= Nat (* (add1 a) b) (+ b (* a b)))))

(define *-left-add1
  (lambda (a b)
    (same (* (add1 a) b))))


;; 7. Write this proof without using ind-Nat in your answer.
(claim +-swap-first-two-of-three
  (Π ((a Nat)
      (b Nat)
      (c Nat))
    (= Nat
     (+ a (+ b c))
     (+ b (+ a c)))))

(claim +kc
  (-> Nat
    (-> Nat Nat)))

(define +kc
  (lambda (c)
    (lambda (k) (+ k c))))


(define +-swap-first-two-of-three
  (lambda (a b c)
    (trans
      (trans (+-associative a b c)               ;; (+ a (+ b c)) == (+ (+ a b) c)
             (cong (+-commutative a b) (+kc c))) ;; (+ (+ a b) c) == (+ (+ b a) c)
      (symm (+-associative b a c)))))            ;; (+ (+ b a) c) == (+ b (+ a c))


;; 8. Prove this statement.
(claim *-right-add1
  (Π ((a Nat)
      (b Nat))
    (= Nat (* a (add1 b)) (+ a (* a b)))))

(define *-right-add1
  (lambda (a b)
    (ind-Nat
      a
      (lambda (k) (= Nat (* k (add1 b)) (+ k (* k b))))
      (same 0)
      (lambda (k IH)
        (trans
          (cong IH (+ (add1 b)))
          (cong (+-swap-first-two-of-three b k (* k b)) (+ 1)))))))
;; IH : (* k (add1 b)) == (+ k (* k b))
;; pf : (+ (add1 b) (* k (add1 b))) == (+ (add1 k) (+ b (* k b)))
;; cong (+ (add1 b)) (* k (add1 b)) == (+ k (* k b))
;;  --> add1 (+ b (* k (add1 b))) == add1 (+ b (+ k (* k b)))
;; then we have (by +-swap-first-two-of-three)
;;  add1 (+ b (+ k (* k b))) == add1 (+ k (+ b (* k b)))

;; 9. Show that ind-Nat can do anything rec-Nat can do.  In the
;;    definition of rec-Nat*, the only eliminator for Nat that you are
;;    allowed to use is ind-Nat.
(claim rec-Nat*
  (Π ((X U))
    (-> Nat
        X
        (-> Nat X
            X)
      X)))

(define rec-Nat*
  (lambda (X n base step)
    (ind-Nat
      n
      (lambda (k) X)
      base
      step)))


;; 10. Prove that your definition of rec-Nat* always finds the same answer
;;     as the built-in rec-Nat. Uncomment this claim after finishing question 9.
(claim rec-Nat*-ok
  (Π ((X U)
      (target Nat)
      (base X)
      (step (-> Nat X
              X)))
    (= X
      (rec-Nat* X target base step)
      (rec-Nat target base step))))

(define rec-Nat*-ok
  (lambda (X tgt base step)
    (ind-Nat
      tgt
      (lambda (k) (= X
                     (rec-Nat* X k base step)
                     (rec-Nat k base step)))
      (same base)
      (lambda (k IH) (cong IH (step k))))))

;; 11, 12, 13: Show that replace can do anything that cong, symmetry,
;;             and trans can do. Use no eliminators other than replace
;;             in your answer.
(claim replace-can-cong
  (Π ((X U)
      (Y U)
      (from X)
      (to X)
      (f (-> X
           Y)))
    (-> (= X from to)
     (= Y (f from) (f to)))))

(define replace-can-cong
  (lambda (X Y from to f from=to)
    (replace
      from=to
      (lambda (x) (= Y (f from) (f x)))
      (same (f from)))))

(claim replace-can-symm
  (Π ((X U)
      (from X)
      (to X))
    (-> (= X from to)
     (= X to from))))

(define replace-can-symm
  (lambda (X from to from=to)
    (replace
      from=to
      (lambda (x) (= X x from))
      (same from))))

(claim replace-can-trans
  (Π ((X U)
      (l X)
      (m X)
      (r X))
    (-> (= X l m) (= X m r)
     (= X l r))))

(define replace-can-trans
  (lambda (X l m r l=m m=r)
    (replace
      m=r
      (lambda (x) (= X l x))
      l=m)))


;;; Challenge problems


;; Prove the following:
(claim rearrange
  (Π ((a Nat)
      (b Nat)
      (c Nat)
      (d Nat))
    (= Nat (+ (+ a b) (+ c d)) (+ (+ a c) (+ b d)))))

;;; Show that multiplication distributes over addition
(claim *-over-plus
  (Π ((a Nat)
      (b Nat)
      (c Nat))
    (= Nat
      (* a (+ b c))
      (+ (* a b) (* a c)))))
